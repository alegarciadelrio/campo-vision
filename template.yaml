AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Campo Vision - Telemetry System for Agricultural Equipment

Globals:
  Function:
    Timeout: 30
    Runtime: python3.12
    Architectures:
      - x86_64
    Environment:
      Variables:
        TELEMETRY_TABLE: !Ref TelemetryTable
        USER_POOL_ID: !Ref CampoVisionUserPool
        USER_POOL_CLIENT_ID: !Ref CampoVisionUserPoolClient

Resources:
  # Cognito User Pool
  CampoVisionUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: CampoVisionUserPool
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true

  # Cognito User Pool Client
  CampoVisionUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: CampoVisionClient
      UserPoolId: !Ref CampoVisionUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      PreventUserExistenceErrors: ENABLED

  # Lambda Layer for common code
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: campo-vision-common-layer
      Description: Common code for Campo Vision Lambda functions
      ContentUri: ./layers
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: Retain

  # API Gateway
  TelemetryApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CampoVisionUserPool.Arn
        AddDefaultAuthorizerToCorsPreflight: false

  # Lambda Functions
  IngestTelemetryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/ingest-telemetry/
      Handler: app.lambda_handler
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          TELEMETRY_TABLE: !Ref TelemetryTable
          USER_POOL_ID: !Ref CampoVisionUserPool
          USER_POOL_CLIENT_ID: !Ref CampoVisionUserPoolClient
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TelemetryTable
      Events:
        IngestAPI:
          Type: Api
          Properties:
            RestApiId: !Ref TelemetryApi
            Path: /telemetry
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  GetTelemetryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get-telemetry/
      Handler: app.lambda_handler
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          TELEMETRY_TABLE: !Ref TelemetryTable
          USER_POOL_ID: !Ref CampoVisionUserPool
          USER_POOL_CLIENT_ID: !Ref CampoVisionUserPoolClient
      Events:
        GetAPI:
          Type: Api
          Properties:
            RestApiId: !Ref TelemetryApi
            Path: /telemetry
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TelemetryTable
            
  ListDevicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/list-devices/
      Handler: app.lambda_handler
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          DEVICE_TABLE: !Ref DeviceTable
          TELEMETRY_TABLE: !Ref TelemetryTable
          USER_POOL_ID: !Ref CampoVisionUserPool
          USER_POOL_CLIENT_ID: !Ref CampoVisionUserPoolClient
      Events:
        GetAPI:
          Type: Api
          Properties:
            RestApiId: !Ref TelemetryApi
            Path: /devices
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DeviceTable
        - DynamoDBReadPolicy:
            TableName: !Ref TelemetryTable

  ManageUserCompanyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/manage-user-company/
      Handler: app.lambda_handler
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          USER_COMPANY_TABLE: !Ref UserCompanyTable
          COMPANY_TABLE: !Ref CompanyTable
          USER_POOL_ID: !Ref CampoVisionUserPool
          USER_POOL_CLIENT_ID: !Ref CampoVisionUserPoolClient
      Events:
        ManageAPI:
          Type: Api
          Properties:
            RestApiId: !Ref TelemetryApi
            Path: /user-company
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
        GetAPI:
          Type: Api
          Properties:
            RestApiId: !Ref TelemetryApi
            Path: /user-company
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
        DeleteAPI:
          Type: Api
          Properties:
            RestApiId: !Ref TelemetryApi
            Path: /user-company
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer
        OptionsAPI:
          Type: Api
          Properties:
            RestApiId: !Ref TelemetryApi
            Path: /user-company
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserCompanyTable
        - DynamoDBReadPolicy:
            TableName: !Ref CompanyTable
            
  ManageCompanyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/manage-company/
      Handler: app.lambda_handler
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          COMPANY_TABLE: !Ref CompanyTable
          USER_COMPANY_TABLE: !Ref UserCompanyTable
          USER_POOL_ID: !Ref CampoVisionUserPool
          USER_POOL_CLIENT_ID: !Ref CampoVisionUserPoolClient
      Events:
        CreateAPI:
          Type: Api
          Properties:
            RestApiId: !Ref TelemetryApi
            Path: /company
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
        GetAPI:
          Type: Api
          Properties:
            RestApiId: !Ref TelemetryApi
            Path: /company
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
        UpdateAPI:
          Type: Api
          Properties:
            RestApiId: !Ref TelemetryApi
            Path: /company
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer
        DeleteAPI:
          Type: Api
          Properties:
            RestApiId: !Ref TelemetryApi
            Path: /company
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer
        OptionsAPI:
          Type: Api
          Properties:
            RestApiId: !Ref TelemetryApi
            Path: /company
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CompanyTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserCompanyTable
          
  ManageDeviceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/manage-device/
      Handler: app.lambda_handler
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          DEVICE_TABLE: !Ref DeviceTable
          USER_POOL_ID: !Ref CampoVisionUserPool
          USER_POOL_CLIENT_ID: !Ref CampoVisionUserPoolClient
      Events:
        CreateAPI:
          Type: Api
          Properties:
            RestApiId: !Ref TelemetryApi
            Path: /devices
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
        GetDeviceAPI:
          Type: Api
          Properties:
            RestApiId: !Ref TelemetryApi
            Path: /device
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
        UpdateAPI:
          Type: Api
          Properties:
            RestApiId: !Ref TelemetryApi
            Path: /devices
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer
        DeleteAPI:
          Type: Api
          Properties:
            RestApiId: !Ref TelemetryApi
            Path: /devices
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer
        OptionsAPI:
          Type: Api
          Properties:
            RestApiId: !Ref TelemetryApi
            Path: /devices
            Method: OPTIONS
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DeviceTable

  # DynamoDB Table
  TelemetryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: deviceId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: deviceId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: TimestampIndex
          KeySchema:
            - AttributeName: timestamp
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # Company Table
  CompanyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: companyId
          AttributeType: S
      KeySchema:
        - AttributeName: companyId
          KeyType: HASH

  # Device Table
  DeviceTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: deviceId
          AttributeType: S
        - AttributeName: companyId
          AttributeType: S
      KeySchema:
        - AttributeName: deviceId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: CompanyIndex
          KeySchema:
            - AttributeName: companyId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # User Company Table
  UserCompanyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: companyId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: companyId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: CompanyIndex
          KeySchema:
            - AttributeName: companyId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # Frontend Resources
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "campo-vision-frontend-${AWS::AccountId}"
      AccessControl: Private
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET]
            AllowedOrigins: ['*']
            MaxAge: 3000

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: 's3:GetObject'
            Resource: !Sub "${FrontendBucket.Arn}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${FrontendCloudFrontDistribution}"

  FrontendCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt FrontendBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !GetAtt FrontendCloudFrontOAC.Id
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods: [GET, HEAD, OPTIONS]
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html

  FrontendCloudFrontOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "campo-vision-oac-${AWS::AccountId}"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # IoT Core Resources
  CampoVisionIoTPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: CampoVisionIoTPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'iot:Connect'
            Resource: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/${!iot:Connection.Thing.ThingName}'
          - Effect: Allow
            Action:
              - 'iot:Publish'
            Resource: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/campo-vision/telemetry'
          - Effect: Allow
            Action:
              - 'iot:Subscribe'
            Resource: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/campo-vision/commands/${!iot:Connection.Thing.ThingName}'
          - Effect: Allow
            Action:
              - 'iot:Receive'
            Resource: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/campo-vision/commands/${!iot:Connection.Thing.ThingName}'

  IoTToDynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: iot.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSIoTRuleActions'
      Policies:
        - PolicyName: IoTToDynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                Resource: !GetAtt TelemetryTable.Arn

  TelemetryIoTRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: CampoVisionTelemetryRule
      TopicRulePayload:
        AwsIotSqlVersion: '2016-03-23'
        Sql: >-
          SELECT 
            deviceId, 
            timestamp() as timestamp,
            latitude,
            longitude,
            temperature,
            * 
          FROM 'campo-vision/telemetry'
        Actions:
          - DynamoDB:
              TableName: !Ref TelemetryTable
              HashKeyField: deviceId
              HashKeyValue: "${deviceId}"
              RangeKeyField: timestamp
              RangeKeyValue: "${timestamp}"
              RoleArn: !GetAtt IoTToDynamoDBRole.Arn
        ErrorAction:
          CloudwatchLogs:
            LogGroupName: !Ref IoTErrorLogGroup
            RoleArn: !GetAtt IoTToDynamoDBRole.Arn

  IoTErrorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/iot/campo-vision/${AWS::StackName}'
      RetentionInDays: 30

Outputs:
  TelemetryApi:
    Description: "API Gateway endpoint URL for Prod stage for Telemetry functions"
    Value: !Sub "https://${TelemetryApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  IngestTelemetryFunction:
    Description: "Ingest Telemetry Lambda Function ARN"
    Value: !GetAtt IngestTelemetryFunction.Arn
  GetTelemetryFunction:
    Description: "Get Telemetry Lambda Function ARN"
    Value: !GetAtt GetTelemetryFunction.Arn
  TelemetryTable:
    Description: "DynamoDB Table for Telemetry Data"
    Value: !Ref TelemetryTable
  CompanyTable:
    Description: "DynamoDB Table for Company Data"
    Value: !Ref CompanyTable
  DeviceTable:
    Description: "DynamoDB Table for Device Data"
    Value: !Ref DeviceTable
  UserCompanyTable:
    Description: "DynamoDB Table for User Company Data"
    Value: !Ref UserCompanyTable
  FrontendBucket:
    Description: "S3 Bucket for Frontend Hosting"
    Value: !Ref FrontendBucket
  FrontendCloudFrontURL:
    Description: "CloudFront URL for Frontend Access"
    Value: !Sub "https://${FrontendCloudFrontDistribution.DomainName}"
  FrontendCloudFrontDistributionId:
    Description: "CloudFront Distribution ID for Frontend"
    Value: !Ref FrontendCloudFrontDistribution
  CognitoUserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref CampoVisionUserPool
  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref CampoVisionUserPoolClient
  CampoVisionUserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref CampoVisionUserPool
  CampoVisionUserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref CampoVisionUserPoolClient
  ManageUserCompanyFunction:
    Description: "Manage User Company Lambda Function ARN"
    Value: !GetAtt ManageUserCompanyFunction.Arn
  ManageDeviceFunction:
    Description: "Manage Device Lambda Function ARN"
    Value: !GetAtt ManageDeviceFunction.Arn
  CampoVisionIoTEndpoint:
    Description: "AWS IoT Core Endpoint for device connection"
    Value: !Sub "${AWS::AccountId}.iot.${AWS::Region}.amazonaws.com"
  CampoVisionIoTPolicy:
    Description: "IoT Policy for device authentication"
    Value: !Ref CampoVisionIoTPolicy
